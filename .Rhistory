rename(Datetimes = "z6.07506")
#view(logger_E_data)
#Logger F
logger_F_data <- logger_F_data %>%
mutate(logger = "F") %>%
rename(Datetimes = "z6.07592")
#view(logger_F_data)
#Logger G
logger_G_data <- logger_G_data %>%
mutate(logger = "G") %>%
rename(Datetimes = "z6.07509")
#view(logger_G_data)
#Combining all loggers' data
combined_data <- rbind(logger_A_data, logger_C_data, logger_D_data, logger_E_data, logger_F_data, logger_G_data)
#view(combined_data)
#transposing  data
unique_columns <- c("Port.1", "Port.2", "Port.3", "Port.4", "Port.5", "Port.6")
combined_transposed <- pivot_longer(combined_data, cols = all_of(unique_columns), names_to = "Port", values_to = "WaterAmt")
#view(combined_transposed)
#Conversion char to POSIXct (unix time)
combined_transposed$Datetimes <- as.POSIXct(combined_transposed$Datetimes, format = "%m/%d/%y %H:%M", tz = "")
#class(combined_transposed$Datetimes)
#Selecting Columns
combined_transposed <- combined_transposed %>%
select(Datetimes, logger, Port, WaterAmt)
#view(combined_transposed)
#Adding in Depths
combined_transposed <- combined_transposed %>%
mutate(Depth.cm =case_when(
Port == "Port.1" ~ "15",
Port == "Port.2" ~ "30",
Port == "Port.3" ~ "60",
Port == "Port.4" ~ "15",
Port == "Port.5" ~ "30",
Port == "Port.6" ~ "60"
))
#view(combined_transposed)
#Adding Treatments
df <- combined_transposed %>%
mutate(Treatment = case_when(
#Logger A
((Port == "Port.1" | Port == "Port.2" | Port == "Port.3") & logger == "A") ~ "Rye-Radish",
((Port == "Port.4" | Port == "Port.5" | Port == "Port.6") & logger == "A") ~ "Rye-Vetch",
#Logger C
((Port == "Port.1" | Port == "Port.2" | Port == "Port.3") & logger == "C") ~ "Fallow",
((Port == "Port.4" | Port == "Port.5" | Port == "Port.6") & logger == "C") ~ "4-seed",
#Logger D
((Port == "Port.1" | Port == "Port.2" | Port == "Port.3") & logger == "D") ~ "Rye Mono",
((Port == "Port.4" | Port == "Port.5" | Port == "Port.6") & logger == "D") ~ "Rye-vetch",
#Logger E
((Port == "Port.1" | Port == "Port.2" | Port == "Port.3") & logger == "E") ~ "Rye-Vetch",
((Port == "Port.4" | Port == "Port.5" | Port == "Port.6") & logger == "E") ~ "Fallow",
#Logger F
((Port == "Port.1" | Port == "Port.2" | Port == "Port.3") & logger == "F") ~ "4-seed",
((Port == "Port.4" | Port == "Port.5" | Port == "Port.6") & logger == "F") ~ "Rye Mono",
#Logger G
((Port == "Port.1" | Port == "Port.2" | Port == "Port.3") & logger == "G") ~ "4-seed",
((Port == "Port.4" | Port == "Port.5" | Port == "Port.6") & logger == "G") ~ "Fallow",
TRUE ~ NA_character_
)) %>%
mutate(Fallow_YN = ifelse(Treatment == "Fallow", "Y", "N"))
#view(df)
#Timestamp vs. Water Content, color = Depth
ggplot(df, aes(x = Datetimes, y = WaterAmt, color = Depth.cm)) +
geom_smooth() +
# geom_point() +
scale_y_continuous(limits = c(0.18, 0.45)) ##Removes negative values from calibration
#Timestamp vs. Water Content, color = Treatment
ggplot(df, aes(x = Datetimes, y = WaterAmt, color = Treatment)) +
geom_smooth() +
# geom_point() +
scale_y_continuous(limits = c(0.18, 0.45)) ##Removes negative values from calibration
view(df)
#Timestamp vs. Water Content, color = Fallow YN
ggplot(df, aes(x = Datetimes, y = WaterAmt, color = Fallow_YN)) +
geom_smooth() +
# geom_point() +
scale_y_continuous(limits = c(0.18, 0.45)) ##Removes negative values from calibration
#Timestamp vs. Water Content, color = Fallow YN
ggplot(df, aes(x = Datetimes, y = WaterAmt, color = Fallow_YN, shape = Depth.cm)) +
geom_smooth() +
# geom_point() +
scale_y_continuous(limits = c(0.18, 0.45)) ##Removes negative values from calibration
#Timestamp vs. Water Content, color = Fallow YN
ggplot(df, aes(x = Datetimes, y = WaterAmt, color = Fallow_YN, shape = Depth.cm)) +
#geom_smooth() +
geom_point() +
scale_y_continuous(limits = c(0.18, 0.45)) ##Removes negative values from calibration
#Timestamp vs. Water Content, color = Fallow YN
ggplot(df, aes(x = Datetimes, y = WaterAmt, color = Fallow_YN, shape = Depth.cm)) +
geom_smooth() +
geom_point() +
scale_y_continuous(limits = c(0.18, 0.45)) ##Removes negative values from calibration
#Timestamp vs. Water Content, color = Fallow YN
ggplot(df, aes(x = Datetimes, y = WaterAmt, color = Fallow_YN, shape = Depth.cm)) +
geom_smooth(na.rm = T) +
#geom_point() +
scale_y_continuous(limits = c(0.18, 0.45)) ##Removes negative values from calibration
#Timestamp vs. Water Content, color = Fallow YN
ggplot(df, aes(x = Datetimes, y = WaterAmt, color = Fallow_YN)) +
geom_smooth(na.rm = T) +
#geom_point() +
scale_y_continuous(limits = c(0.18, 0.45)) ##Removes negative values from calibration
#Analyzing Interaction between Fallow and Depth
df -> df %>%
mutate(Interaction = interaction(Fallow_YN, Depth.cm))
#Analyzing Interaction between Fallow and Depth
df <- df %>%
mutate(Interaction = interaction(Fallow_YN, Depth.cm))
ggplot(df, aes(x = Interaction, y = WaterAmt, color = Fallow_YN)) +
geom_boxplot(na.rm = T)
Soil_Biomass_Data <- read.csv("~/GitHub/GillData/Soil_Biomass_Data.csv")
View(Soil_Biomass_Data)
#Soil Core and Plant Biomass Data
Soil_Biomass_Data <- read.csv("~/GitHub/GillData/Soil_Biomass_Data.csv")
view(Soil_Biomass_Data)
#Soil Core Data
Soilcore_Data <- read.csv("~/GitHub/GillData/Soilcore_Data.csv")
view(Soilcore_Data)
#Soil Core Data
Soilcore_Data <- read.csv("~/GitHub/GillData/Soilcore_Data.csv")
view(Soilcore_Data)
#Biomass Data
Biomass_Data <- read.csv("~/GitHub/GillData/Biomass_Data.csv")
view(Biomass_Data)
#Weather Data
Weather_Data <- read.csv("~/GitHub/GillData/Weather_Data.csv")
#Weather Data
Weather_Data <- read.csv("~/GitHub/GillData/UC_Gill_Tract_Weather_Data.csv.csv")
#Weather Data
Weather_Data <- read.csv("~/GitHub/GillData/UC_Gill_Tract_Weather_Data.csv")
view(Weather_Data)
#Weather Data
str(Weather_Data)
class(Weather_Data$Datetime)
#Conversion char to POSIXct (unix time)
Weather_Data$Datetimes <- as.POSIXct(Weather_Data$Datetime, format = "%m/%d/%y %H:%M", tz = "")
class(Weather_Data$Datetimes)
#Weather Data Fixing
#Conversion char to POSIXct (unix time)
Weather_Data$Datetimes <- as.POSIXct(Weather_Data$Datetime, format = "%m/%d/%y %H:%M", tz = "")
#class(Weather_Data$Datetimes)
view(Weather_Data)
#Weather Data Fixing
#Conversion char to POSIXct (unix time)
Weather_Data$Datetimes <- as.POSIXct(Weather_Data$Datetime, format = "%m/%d/%y %H:%M", tz = "")
a
#Analyzing Interaction between Fallow and Depth
df <- df %>%
mutate(Interaction = interaction(Fallow_YN, Depth.cm)) +
ggplot(df, aes(x = Interaction, y = WaterAmt, color = Fallow_YN)) +
geom_boxplot(na.rm = T)
#Analyzing Interaction between Fallow and Depth
df <- df %>%
mutate(Interaction = interaction(Fallow_YN, Depth.cm)) %>%
ggplot(df, aes(x = Interaction, y = WaterAmt, color = Fallow_YN)) +
geom_boxplot(na.rm = T)
#Analyzing Interaction between Fallow and Depth
df <- df %>%
mutate(Interaction = interaction(Fallow_YN, Depth.cm))
ggplot(df, aes(x = Interaction, y = WaterAmt, color = Fallow_YN)) +
geom_boxplot(na.rm = T)
#Analyzing Weather Data
rain_events <- Weather_Data %>%
select(Datetimes, Rain...in) %>%
ggplot(aes(x = Datetimes, y = Rain...in))
#Analyzing Weather Data
Weather_Data %>%
select(Datetimes, Rain...in) %>%
ggplot(aes(x = Datetimes, y = Rain...in))
rain_events
group_by(Date) %>%
summarise(daily_rainfall = sum(Rain...in, na.rm = T))
#Analyzing Weather Data
daily_rainfall <- Weather_Data %>%
mutate(Date = as.Date(Datetimes)) %>%  #Extract the date part
group_by(Date) %>%
summarise(daily_rainfall = sum(Rain...in, na.rm = T))
print(daily_rainfall)
#Analyzing Weather Data
#Aggregating Daily Rainfall
daily_rain <- Weather_Data %>%
mutate(Date = as.Date(Datetimes)) %>%  #Extract the date part
group_by(Date) %>%
summarise(daily_rainfall = sum(Rain...in, na.rm = T))
ggplot(daily_rain, aes(x = Date, y = daily_rainfall))
ggplot(daily_rain, aes(x = Date, y = daily_rainfall)) +
geom_col(fill = "blue")
ggplot(daily_rain, aes(x = Date, y = daily_rainfall)) +
geom_col(fill = "blue", na.rm = T)
ggplot(daily_rain, aes(x = Date, y = daily_rainfall)) +
geom_line(color = "blue", na.rm = T)
ggplot(daily_rain, aes(x = Date, y = daily_rainfall)) +
geom_line(color = "blue", na.rm = T) +
geom_point(color = "red")
ggplot(daily_rain, aes(x = Date, y = daily_rainfall)) +
geom_line(color = "blue", na.rm = T) +
geom_point(color = "blue")
ggplot(daily_rain, aes(x = Date, y = daily_rainfall)) +
geom_line(color = "blue", na.rm = T) +
geom_point(color = "blue") +
labs(title = "Daily Rainfall",
x = "Date",
y = "Daily Rainfall (in)") +
theme_minimal()
ggplot(daily_rain, aes(x = Date, y = daily_rainfall)) +
geom_line(color = "blue", na.rm = T) +
geom_point(color = "green") +
labs(title = "UC Gill Tract Daily Rainfall",
x = "Date",
y = "Daily Rainfall (in)") +
theme_minimal()
ggplot(daily_rain, aes(x = Date, y = daily_rainfall)) +
geom_line(color = "blue", na.rm = T) +
geom_point(color = "blue") +
labs(title = "UC Gill Tract 2023-24 Daily Rainfall",
x = "Date",
y = "Daily Rainfall (in)") +
theme_minimal()
ggplot(daily_rain, aes(x = Date, y = daily_rainfall)) +
geom_line(color = "blue", na.rm = T) +
geom_point(color = "blue", na.rm = T) +
labs(title = "UC Gill Tract 2023-24 Daily Rainfall",
x = "Date",
y = "Daily Rainfall (in)") +
theme_minimal()
ggplot(df, aes(x = Interaction, y = WaterAmt, color = Fallow_YN)) +
geom_boxplot(na.rm = T)
#Daily Temp High and Low
daily_temps <- Weather_Data %>%
mutate(Date = as.Date(Datetimes)) %>%  #Extract the date part
group_by(Date) %>%
summarise(
MinTemp = min(Temp....F, na.rm = T),
MaxTemp = max(Temp....F, na.rm = T)
)
print(daily_temps)
#Reshaping Max & Min Temp dataframe
long_temps <- daily_temps %>%
pivot_longer(cols = c(MinTemp, MaxTemp),
names_to = "TempType",
values_to = "Temp.F")
print(long_temps)
ggplot(long_temps, aes(x = Date, y = Temp.F, color = TempType)) +
geom_line() +
geom_point() + # Add points to the line plot for better visibility
labs(title = "Daily Minimum and Maximum Temperatures",
x = "Date",
y = "Temperature (Â°C)") +
scale_color_manual(values = c("MinTemp" = "blue", "MaxTemp" = "red"),
labels = c("Minimum Temperature", "Maximum Temperature")) +
theme_minimal()
ggplot(long_temps, aes(x = Date, y = Temp.F, color = TempType)) +
# geom_line() +
geom_point() + # Add points to the line plot for better visibility
labs(title = "Daily Minimum and Maximum Temperatures",
x = "Date",
y = "Temperature (Â°C)") +
scale_color_manual(values = c("MinTemp" = "blue", "MaxTemp" = "red"),
labels = c("Minimum Temperature", "Maximum Temperature")) +
theme_minimal()
ggplot(long_temps, aes(x = Date, y = Temp.F, color = TempType)) +
geom_line() +
geom_point() + # Add points to the line plot for better visibility
labs(title = "Daily Minimum and Maximum Temperatures",
x = "Date",
y = "Temperature (Â°C)") +
scale_color_manual(values = c("MinTemp" = "blue", "MaxTemp" = "red"),
labels = c("Minimum Temperature", "Maximum Temperature")) +
theme_minimal()
ggplot(long_temps, aes(x = Date, y = Temp.F, color = TempType)) +
#geom_line() +
geom_point() + # Add points to the line plot for better visibility
labs(title = "Daily Minimum and Maximum Temperatures",
x = "Date",
y = "Temperature (Â°C)") +
scale_color_manual(values = c("MinTemp" = "blue", "MaxTemp" = "red"),
labels = c("Minimum Temperature", "Maximum Temperature")) +
theme_minimal()
ggplot(long_temps, aes(x = Date, y = Temp.F, color = TempType)) +
geom_line(aes(group = TempType)) +
geom_point() + # Add points to the line plot for better visibility
labs(title = "Daily Minimum and Maximum Temperatures",
x = "Date",
y = "Temperature (Â°C)") +
scale_color_manual(values = c("MinTemp" = "blue", "MaxTemp" = "red"),
labels = c("Minimum Temperature", "Maximum Temperature")) +
theme_minimal()
ggplot(long_temps, aes(x = Date, y = Temp.F, color = TempType)) +
geom_line(aes(group = TempType)) +
geom_point() + # Add points to the line plot for better visibility
labs(title = "Daily Minimum and Maximum Temperatures",
x = "Date",
y = "Temperature (Â°C)") +
scale_color_manual(values = c("MinTemp" = "blue", "MaxTemp" = "red"),
labels = c("Minimum Temperature", "Maximum Temperature")) +
scale_y_continuous(breaks = seq(floor(min(long_temps$Temp)), ceiling(max(long_temps$Temp)), by = 5)) +
theme_minimal()
ggplot(long_temps, aes(x = Date, y = Temp.F, color = TempType)) +
geom_line(aes(group = TempType)) +
geom_point() + # Add points to the line plot for better visibility
labs(title = "Daily Minimum and Maximum Temperatures",
x = "Date",
y = "Temperature (Â°C)") +
scale_color_manual(values = c("MinTemp" = "blue", "MaxTemp" = "red"),
labels = c("Minimum Temperature", "Maximum Temperature")) +
scale_y_continuous(breaks = seq(floor(min(long_temps$Temp.F)), ceiling(max(long_temps$Temp.F)), by = 5)) +
theme_minimal()
ggplot(long_temps, aes(x = Date, y = Temp.F, color = TempType)) +
geom_line(aes(group = TempType)) +
geom_point() + # Add points to the line plot for better visibility
labs(title = "Daily Minimum and Maximum Temperatures",
x = "Date",
y = "Temperature (Â°C)") +
scale_color_manual(values = c("MinTemp" = "blue", "MaxTemp" = "red"),
labels = c("Minimum Temperature", "Maximum Temperature")) +
scale_y_continuous(breaks = seq(floor(min(long_temps$Temp.F)), ceiling(max(long_temps$Temp.F)), by = 5)) +
theme_minimal()
str(long_temps)
#Reshaping Max & Min Temp dataframe
long_temps <- daily_temps %>%
pivot_longer(cols = c(MinTemp, MaxTemp),
names_to = "TempType",
values_to = "Temp.F")
long_temps$Temp.F <- as.numeric(long_temps$Temp.F)
print(long_temps)
str(long_temps)
view(long_temps)
long_temps$Temp.F <- as.numeric(long_temps$Temp.F)
ggplot(long_temps, aes(x = Date, y = Temp.F, color = TempType)) +
geom_line(aes(group = TempType)) +
geom_point() + # Add points to the line plot for better visibility
labs(title = "Daily Minimum and Maximum Temperatures",
x = "Date",
y = "Temperature (Â°C)") +
scale_color_manual(values = c("MinTemp" = "blue", "MaxTemp" = "red"),
labels = c("Minimum Temperature", "Maximum Temperature")) +
scale_y_continuous(breaks = seq(floor(min(long_temps$Temp.F)), ceiling(max(long_temps$Temp.F)), by = 5)) +
theme_minimal()
str(long_temps)
ggplot(long_temps, aes(x = Date, y = Temp.F, color = TempType)) +
geom_line(aes(group = TempType)) +
geom_point() + # Add points to the line plot for better visibility
labs(title = "Daily Minimum and Maximum Temperatures",
x = "Date",
y = "Temperature (Â°C)") +
scale_color_manual(values = c("MinTemp" = "blue", "MaxTemp" = "red"),
labels = c("Minimum Temperature", "Maximum Temperature")) +
#scale_y_continuous(breaks = seq(floor(min(long_temps$Temp.F)), ceiling(max(long_temps$Temp.F)), by = 5)) +
theme_minimal()
ggplot(long_temps, aes(x = Date, y = Temp.F, color = TempType)) +
geom_line(aes(group = TempType), na.rm = T) +
geom_point(na.rm = T) + # Add points to the line plot for better visibility
labs(title = "Daily Minimum and Maximum Temperatures",
x = "Date",
y = "Temperature (Â°C)") +
scale_color_manual(values = c("MinTemp" = "blue", "MaxTemp" = "red"),
labels = c("Minimum Temperature", "Maximum Temperature")) +
#scale_y_continuous(breaks = seq(floor(min(long_temps$Temp.F)), ceiling(max(long_temps$Temp.F)), by = 5)) +
theme_minimal()
ggplot(long_temps, aes(x = Date, y = Temp.F, color = TempType)) +
geom_line(aes(group = TempType), na.rm = T) +
geom_point(na.rm = T) + # Add points to the line plot for better visibility
labs(title = "Daily Minimum and Maximum Temperatures",
x = "Date",
y = "Temperature (Â°C)") +
scale_color_manual(values = c("MinTemp" = "blue", "MaxTemp" = "red"),
labels = c("Minimum Temperature", "Maximum Temperature")) +
theme_minimal()
ggplot(long_temps, aes(x = Date, y = Temp.F, color = TempType)) +
geom_line(aes(group = TempType), na.rm = T) +
geom_point(na.rm = T) + # Add points to the line plot for better visibility
labs(title = "Daily Minimum and Maximum Temperatures",
x = "Date",
y = "Temperature (Â°F)") +
scale_color_manual(values = c("MinTemp" = "blue", "MaxTemp" = "red"),
labels = c("Minimum Temperature", "Maximum Temperature")) +
theme_minimal()
##Analyzing Weather Data
#Aggregating Daily Rainfall
daily_rain <- Weather_Data %>%
mutate(Date = as.Date(Datetimes)) %>%  #Extract the date part
group_by(Date) %>%
summarise(daily_rainfall = sum(Rain...in, na.rm = T))
#print(daily_rain)
ggplot(daily_rain, aes(x = Date, y = daily_rainfall)) +
geom_col(fill = "blue", na.rm = T)
ggplot(daily_rain, aes(x = Date, y = daily_rainfall)) +
geom_line(color = "blue", na.rm = T) +
geom_point(color = "blue", na.rm = T) +
labs(title = "UC Gill Tract 2023-24 Daily Rainfall",
x = "Date",
y = "Daily Rainfall (in)") +
theme_minimal()
#Daily Temp High and Low
daily_temps <- Weather_Data %>%
mutate(Date = as.Date(Datetimes)) %>%  #Extract the date part
group_by(Date) %>%
summarise(
MinTemp = min(Temp....F, na.rm = T),
MaxTemp = max(Temp....F, na.rm = T)
)
#print(daily_temps)
#Reshaping Max & Min Temp dataframe
long_temps <- daily_temps %>%
pivot_longer(cols = c(MinTemp, MaxTemp),
names_to = "TempType",
values_to = "Temp.F")
long_temps$Temp.F <- as.numeric(long_temps$Temp.F)
#str(long_temps)
ggplot(long_temps, aes(x = Date, y = Temp.F, color = TempType)) +
geom_line(aes(group = TempType), na.rm = T) +
geom_point(na.rm = T) + # Add points to the line plot for better visibility
labs(title = "Daily Minimum and Maximum Temperatures",
x = "Date",
y = "Temperature (Â°F)") +
scale_color_manual(values = c("MinTemp" = "blue", "MaxTemp" = "red"),
labels = c("Minimum Temperature", "Maximum Temperature")) +
theme_minimal()
##Analyzing Weather Data
#Aggregating Daily Rainfall
daily_rain <- Weather_Data %>%
mutate(Date = as.Date(Datetimes)) %>%  #Extract the date part
group_by(Date) %>%
summarise(daily_rainfall = sum(Rain...in, na.rm = T))
ggplot(daily_rain, aes(x = Date, y = daily_rainfall)) +
geom_col(fill = "blue", na.rm = T)
ggplot(daily_rain, aes(x = Date, y = daily_rainfall)) +
geom_line(color = "blue", na.rm = T) +
geom_point(color = "blue", na.rm = T) +
labs(title = "UC Gill Tract 2023-24 Daily Rainfall",
x = "Date",
y = "Daily Rainfall (in)") +
theme_minimal()
##Analyzing Weather Data
#Aggregating Daily Rainfall
daily_rain <- Weather_Data %>%
mutate(Date = as.Date(Datetimes)) %>%  #Extract the date part
group_by(Date) %>%
summarise(daily_rainfall = sum(Rain...in, na.rm = T))
#print(daily_rain)
ggplot(daily_rain, aes(x = Date, y = daily_rainfall)) +
geom_line(color = "blue", na.rm = T) +
geom_point(color = "blue", na.rm = T) +
labs(title = "UC Gill Tract 2023-24 Daily Rainfall",
x = "Date",
y = "Daily Rainfall (in)") +
theme_minimal()
#Daily Temp High and Low
daily_temps <- Weather_Data %>%
mutate(Date = as.Date(Datetimes)) %>%  #Extract the date part
group_by(Date) %>%
summarise(
MinTemp = min(Temp....F, na.rm = T),
MaxTemp = max(Temp....F, na.rm = T)
)
#print(daily_temps)
#Reshaping Max & Min Temp dataframe
long_temps <- daily_temps %>%
pivot_longer(cols = c(MinTemp, MaxTemp),
names_to = "TempType",
values_to = "Temp.F")
long_temps$Temp.F <- as.numeric(long_temps$Temp.F)
#str(long_temps)
ggplot(long_temps, aes(x = Date, y = Temp.F, color = TempType)) +
geom_line(aes(group = TempType), na.rm = T) +
geom_point(na.rm = T) + # Add points to the line plot for better visibility
labs(title = "Daily Minimum and Maximum Temperatures",
x = "Date",
y = "Temperature (Â°F)") +
scale_color_manual(values = c("MinTemp" = "blue", "MaxTemp" = "red"),
labels = c("Minimum Temperature", "Maximum Temperature")) +
theme_minimal()
##Analyzing Weather Data
#Aggregating Daily Rainfall
daily_rain <- Weather_Data %>%
mutate(Date = as.Date(Datetimes)) %>%  #Extract the date part
group_by(Date) %>%
summarise(daily_rainfall = sum(Rain...in, na.rm = T))
#print(daily_rain)
ggplot(daily_rain, aes(x = Date, y = daily_rainfall)) +
geom_line(color = "blue", na.rm = T) +
geom_point(color = "blue", na.rm = T) +
labs(title = "UC Gill Tract 2023-24 Daily Rainfall",
x = "Date",
y = "Daily Rainfall (in)") +
theme_minimal()
#Daily Temp High and Low
daily_temps <- Weather_Data %>%
mutate(Date = as.Date(Datetimes)) %>%  #Extract the date part
group_by(Date) %>%
summarise(
MinTemp = min(Temp....F, na.rm = T),
MaxTemp = max(Temp....F, na.rm = T)
)
#print(daily_temps)
#Reshaping Max & Min Temp dataframe
long_temps <- daily_temps %>%
pivot_longer(cols = c(MinTemp, MaxTemp),
names_to = "TempType",
values_to = "Temp.F")
long_temps$Temp.F <- as.numeric(long_temps$Temp.F)
#str(long_temps)
ggplot(long_temps, aes(x = Date, y = Temp.F, color = TempType)) +
geom_line(aes(group = TempType), na.rm = T) +
geom_point(na.rm = T) + # Add points to the line plot for better visibility
labs(title = "UC Gill Tract 2023-24 Daily Minimum and Maximum Temperatures",
x = "Date",
y = "Temperature (Â°F)") +
scale_color_manual(values = c("MinTemp" = "blue", "MaxTemp" = "red"),
labels = c("Minimum Temperature", "Maximum Temperature")) +
theme_minimal()
