knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
install.packages("ggplot2")
library(ggplot2)
install.packages("tidyverse")
library(magrittr)
install.packages("RCurl")
library(ggplot2)
library(magrittr)
library(RCurl)
library(readr)
# Replace 'url_to_csv_file' with the URL of the raw CSV file on GitHub
url_A <- "https://github.com/polyculturist/GillData/blob/main/logger_A_data.csv"
# Read the CSV file from the URL
data <- read.csv(url_A)
# Read the CSV file from the URL
data <- read.csv(url_A)
# View the first few rows of the data
head(data)
# Replace 'url_to_csv_file' with the URL of the raw CSV file on GitHub
url_A <- "https://github.com/polyculturist/GillData/blob/main/logger_A_data.csv"
# Read the CSV file from the URL
data <- read.csv(url_A)
# View the first few rows of the data
head(data)
x <- getURL("https://github.com/polyculturist/GillData/blob/main/logger_A_data.csv")
y <- read.csv(text = x)
head(y)
logger_A_data <- read.csv("G:/My Drive/Migs Research/Gill Tract - 2023-24/GT DATA/SoilSensor_DATA/logger_A_data.csv", na.strings="#N/A")
View(logger_A_data)
logger_A_data <- read.csv("G:/My Drive/Migs Research/Gill Tract - 2023-24/GT DATA/SoilSensor_DATA/logger_A_data.csv", na.strings="#N/A")
str(logger_A_data)
head(logger_A_data)
logger_C_data <- read.csv("~/GitHub/GillData/logger_C_data.csv", na.strings="#N/A")
View(logger_C_data)
logger_A_data <- read.csv("~/GitHub/GillData/logger_A_data.csv", na.strings="#N/A")
logger_C_data <- read.csv("~/GitHub/GillData/logger_C_data.csv", na.strings="#N/A")
logger_D_data <- read.csv("~/GitHub/GillData/logger_D_data.csv", na.strings="#N/A")
logger_E_data <- read.csv("~/GitHub/GillData/logger_E_data.csv", na.strings="#N/A")
logger_F_data <- read.csv("~/GitHub/GillData/logger_F_data.csv", na.strings="#N/A")
logger_G_data <- read.csv("~/GitHub/GillData/logger_G_data.csv", na.strings="#N/A")
head(logger_A_data)
View()logger_C_data
View(logger_C_data)
View(logger_D_data)
View(logger_E_data)
View(logger_F_data)
View(logger_A_data)
head(logger_A_data)
library(tidyr)
library(ggplot2)
library(magrittr)
library(readr)
library(RCurl)
library(tidyr)
# Specify the columns you want to become unique rows
unique_columns <- c("Port1", "Port2", "Port3", "Port4", "Port5", "Port6")
# Transpose the data
transposed_data <- pivot_longer(logger_A_data, cols = unique_columns, names_to = "Column_Name", values_to = "Value")
# Specify the columns you want to become unique rows
unique_columns <- c("Port.1", "Port.2", "Port.3", "Port.4", "Port.5", "Port.6")
# Transpose the data
transposed_data <- pivot_longer(logger_A_data, cols = unique_columns, names_to = "Column_Name", values_to = "Value")
# View the transposed data
head(transposed_data)
# View the transposed data
view(transposed_data)
# View the transposed data
head(transposed_data)
# View the transposed data
View(transposed_data)
# Transpose the data
transposed_data <- pivot_longer(logger_A_data, cols = unique_columns, names_to = "Port", values_to = "Value")
# View the transposed data
View(transposed_data)
# Transpose the data
transposed_data <- pivot_longer(logger_A_data, cols = unique_columns, names_to = "Port", values_to = "WaterAmt")
# View the transposed data
View(transposed_data)
#transposing  data
# Specify the columns you want to become unique rows
unique_columns <- c("Port.1", "Port.2", "Port.3", "Port.4", "Port.5", "Port.6")
# Transpose the data
transposed_data_A <- pivot_longer(logger_A_data, cols = unique_columns, names_to = "Port", values_to = "WaterAmt")
# View the transposed data
View(transposed_data_A)
summary(transposed_data_A)
# View the transposed data
str(transposed_data_A)
# View the transposed data
str(transposed_data_A)
# Converting to date-time using POSIXct
A_data_date_time <- as.POSIXct(transposed_data_A, format = "%Y/%m/%d %H:%M")
# Converting to date-time using POSIXct
A_data_date_time <- as.POSIXct(transposed_data_A, format = "%Y-%m-%d %H:%M")
# Converting to date-time using POSIXct
A_data_date_time <- as.POSIXct(transposed_data_A, format = "%m/%d/%y %H:%M")
# View the converted POSIXct object
print(date_time)
# View the converted POSIXct object
print(A_data_date_time)
# Converting to date-time using POSIXct
A_data_date_time <- as.POSIXct(transposed_data_A, format = "%m/%d/%y %H:%M")
# Converting to date-time using POSIXct
A_data_date_time <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M")
# View the converted POSIXct object
print(A_data_date_time)
# Transpose the data
transposed_data_A <- pivot_longer(logger_A_data, cols = unique_columns, names_to = "Port", values_to = "WaterAmt")
# View the transposed data
str(transposed_data_A)
# Converting to date-time using POSIXct
A_data_date_time <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = "")
# View the converted POSIXct object
head(A_data_date_time)
# View the transposed data
str(transposed_data_A)
# View the converted POSIXct object
str(A_data_date_time)
# Converting to date-time using POSIXct
A_data_date_time <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = "")
# View the converted POSIXct object
str(A_data_date_time)
# View the converted POSIXct object
print(A_data_date_time)
# Converting to date-time using POSIXct
A_data_date_time$datetime <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = "")
# View the converted POSIXct object
print(A_data_date_time)
# Converting to date-time using POSIXct
dfA <- mutate(transposed_data_A datetime_col <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = ""))
# Converting to date-time using POSIXct
dfA <- mutate(transposed_data_A, datetime_col <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = ""))
library(tidyverse)
# View the transposed data
str(transposed_data_A)
# Converting to date-time using POSIXct
dfA <- mutate(transposed_data_A, datetime_col <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = ""))
# View the converted POSIXct object
print(dfA)
# Converting to date-time using POSIXct
dfA <- mutate(transposed_data_A, z6.07504 <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = ""))
# View the converted POSIXct object
print(dfA)
library(ggplot2)
library(magrittr)
library(readr)
library(RCurl)
library(tidyr)
library(tidyverse)
logger_A_data <- read.csv("~/GitHub/GillData/logger_A_data.csv", na.strings="#N/A")
logger_C_data <- read.csv("~/GitHub/GillData/logger_C_data.csv", na.strings="#N/A")
logger_D_data <- read.csv("~/GitHub/GillData/logger_D_data.csv", na.strings="#N/A")
logger_E_data <- read.csv("~/GitHub/GillData/logger_E_data.csv", na.strings="#N/A")
logger_F_data <- read.csv("~/GitHub/GillData/logger_F_data.csv", na.strings="#N/A")
logger_G_data <- read.csv("~/GitHub/GillData/logger_G_data.csv", na.strings="#N/A")
head(logger_A_data)
# Specify the columns you want to become unique rows
unique_columns <- c("Port.1", "Port.2", "Port.3", "Port.4", "Port.5", "Port.6")
# Transpose the data
transposed_data_A <- pivot_longer(logger_A_data, cols = unique_columns, names_to = "Port", values_to = "WaterAmt")
# Transpose the data
transposed_data_A <- pivot_longer(logger_A_data, cols = all_of(unique_columns), names_to = "Port", values_to = "WaterAmt")
# View the transposed data
str(transposed_data_A)
# Converting to date-time using POSIXct
dfA <- mutate(transposed_data_A, z6.07504 <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = ""))
# View the converted POSIXct object
print(dfA)
# Transpose the data
transposed_data_A <- pivot_longer(logger_A_data, cols = all_of(unique_columns), names_to = "Port", values_to = "WaterAmt")
# View the transposed data
str(transposed_data_A)
# Converting to date-time using POSIXct
dfA <- mutate(transposed_data_A, z6.07504 <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = ""))
# View the converted POSIXct object
print(dfA)
# View the converted POSIXct object
view(dfA)
str(dfA)
# View the transposed data
str(transposed_data_A)
library(ggplot2)
library(magrittr)
library(readr)
library(RCurl)
library(tidyr)
library(tidyverse)
#transposing  data
unique_columns <- c("Port.1", "Port.2", "Port.3", "Port.4", "Port.5", "Port.6")
transposed_data_A <- pivot_longer(logger_A_data, cols = all_of(unique_columns), names_to = "Port", values_to = "WaterAmt")
str(transposed_data_A)
# Converting to date-time using POSIXct (may not be necessary?)
#dfA <- mutate(transposed_data_A, z6.07504 <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = ""))
# View the converted POSIXct object
#view(dfA)
#str(dfA)
transposed_data_A <- dataframe_A %>%
rename(Datetime = "z6.07504")
dataframe_A <- transposed_data_A %>%
rename(Datetime = "z6.07504")
view(dataframe)
view(dataframe_A)
dataframe_A <- transposed_data_A %>%
rename(Datetime = "z6.07504") %>%
select(Datetime, Port, WaterAmt)
view(dataframe_A)
str(transposed_data_A)
dfA %>%
ggplot() +
aes(x = dataframe_A$Datetime, y = dataframe_A$WaterAmt)
dfA %>%
ggplot() +
aes(x = dfA$Datetime, y = dfA$WaterAmt)
# Converting to date-time using POSIXct (may not be necessary?)
dfA <- mutate(transposed_data_A, z6.07504 <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = ""))
dfA2 %>%
ggplot() +
aes(x = Datetime, y = WaterAmt)
dfA %>%
ggplot() +
aes(x = Datetime, y = WaterAmt)
dfA %>%
ggplot() +
aes(x = Datetime, y = WaterAmt) +
geom_point()
dataframe_A %>%
ggplot() +
aes(x = Datetime, y = WaterAmt) +
geom_point()
dataframe_A %>%
ggplot() +
aes(x = Datetime, y = WaterAmt, color = Port) +
geom_point()
# Converting to date-time using POSIXct (may not be necessary?)
dfA <- mutate(transposed_data_A, z6.07504 <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = ""))
dfA %>%
ggplot() +
aes(x = Datetime, y = WaterAmt, color = Port) +
geom_point()
dfA %>%
ggplot() +
aes(x = z6.07504, y = WaterAmt, color = Port) +
geom_point()
dfA %>%
ggplot() +
aes(x = z6.07504, y = WaterAmt, color = Port) +
geom_point() +
scale_x_datetime(breaks = seq(min(z6.07504), max(z6.07504), by = "30 days"))
# Converting to date-time using POSIXct (may not be necessary?)
dfA <- mutate(transposed_data_A, z6.07504 <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = ""))
#Adding in Treatments, Fallow Y/N, and renaming columns
dataframe_A <- dfA %>%
rename(Datetime = "z6.07504") %>%
select(Datetime, Port, WaterAmt)
dataframe_A %>%
ggplot() +
aes(x = z6.07504, y = WaterAmt, color = Port) +
geom_point() +
scale_x_datetime(breaks = seq(min(dataframe_A$Datetime), max(dataframe_A$Datetime), by = "30 days"))
# Converting to date-time using POSIXct (may not be necessary?)
dfA <- mutate(transposed_data_A, z6.07504 <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = ""))
class(dfA)
#transposing  data
unique_columns <- c("Port.1", "Port.2", "Port.3", "Port.4", "Port.5", "Port.6")
transposed_data_A <- pivot_longer(logger_A_data, cols = all_of(unique_columns), names_to = "Port", values_to = "WaterAmt")
#str(transposed_data_A)
# Renaming columns
dataframe_A <- transposed_data_A %>%
rename(Datetimes = "z6.07504") %>%
select(Datetimes, Port, WaterAmt)
# Converting to date-time using POSIXct (may not be necessary?)
dfA <- mutate(dataframe_A$Datetimes <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = ""))
# Converting to date-time using POSIXct (may not be necessary?)
dfA <- transform(dataframe_A$Datetimes <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = ""))
class(dfA)
# Converting to date-time using POSIXct (may not be necessary?)
dfA <- mutate(dataframe_A$Datetimes <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = ""))
view(dataframe_A)
# Example character data representing datetime
char_datetime <- "2024-05-04 13:40:00"
class(char_datetime)
# Convert character data to POSIXct
datetime <- as.POSIXct(char_datetime, format = "%Y-%m-%d %H:%M:%S")
# Check the class of the object
class(datetime)
# Print the object
print(datetime)
class(char_datetime)
# Check the class of the object
class(datetime)
# Print the object
print(datetime)
class(dataframe_A)
# Converting to date-time using POSIXct
dataframe_A$datetime <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = "")
class(dataframe_A)
class(datetime)
class(datetime)
library(ggplot2)
library(magrittr)
library(readr)
library(RCurl)
library(tidyr)
library(tidyverse)
logger_A_data <- read.csv("~/GitHub/GillData/logger_A_data.csv", na.strings="#N/A")
logger_C_data <- read.csv("~/GitHub/GillData/logger_C_data.csv", na.strings="#N/A")
logger_D_data <- read.csv("~/GitHub/GillData/logger_D_data.csv", na.strings="#N/A")
logger_E_data <- read.csv("~/GitHub/GillData/logger_E_data.csv", na.strings="#N/A")
logger_F_data <- read.csv("~/GitHub/GillData/logger_F_data.csv", na.strings="#N/A")
logger_G_data <- read.csv("~/GitHub/GillData/logger_G_data.csv", na.strings="#N/A")
head(logger_A_data)
#transposing  data
unique_columns <- c("Port.1", "Port.2", "Port.3", "Port.4", "Port.5", "Port.6")
transposed_data_A <- pivot_longer(logger_A_data, cols = all_of(unique_columns), names_to = "Port", values_to = "WaterAmt")
#str(transposed_data_A)
# Renaming columns
dataframe_A <- transposed_data_A %>%
rename(Datetimes = "z6.07504") %>%
select(Datetimes, Port, WaterAmt)
view(dataframe_A)
class(dataframe_A)
# Converting to date-time using POSIXct
dataframe_A$datetime <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = "")
#dfA <- mutate(dataframe_A$Datetimes <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = ""))
class(datetime)
# Converting to date-time using POSIXct
datetime <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = "")
class(datetime)
#str(transposed_data_A)
# Renaming columns
dataframe_A <- transposed_data_A %>%
rename(Datetimes = "z6.07504") %>%
select(Datetimes, Port, WaterAmt) %>%
as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = "")
view(datetime)
