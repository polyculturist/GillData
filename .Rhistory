knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
install.packages("ggplot2")
library(ggplot2)
install.packages("tidyverse")
library(magrittr)
install.packages("RCurl")
library(ggplot2)
library(magrittr)
library(RCurl)
library(readr)
# Replace 'url_to_csv_file' with the URL of the raw CSV file on GitHub
url_A <- "https://github.com/polyculturist/GillData/blob/main/logger_A_data.csv"
# Read the CSV file from the URL
data <- read.csv(url_A)
# Read the CSV file from the URL
data <- read.csv(url_A)
# View the first few rows of the data
head(data)
# Replace 'url_to_csv_file' with the URL of the raw CSV file on GitHub
url_A <- "https://github.com/polyculturist/GillData/blob/main/logger_A_data.csv"
# Read the CSV file from the URL
data <- read.csv(url_A)
# View the first few rows of the data
head(data)
x <- getURL("https://github.com/polyculturist/GillData/blob/main/logger_A_data.csv")
y <- read.csv(text = x)
head(y)
logger_A_data <- read.csv("G:/My Drive/Migs Research/Gill Tract - 2023-24/GT DATA/SoilSensor_DATA/logger_A_data.csv", na.strings="#N/A")
View(logger_A_data)
logger_A_data <- read.csv("G:/My Drive/Migs Research/Gill Tract - 2023-24/GT DATA/SoilSensor_DATA/logger_A_data.csv", na.strings="#N/A")
str(logger_A_data)
head(logger_A_data)
logger_C_data <- read.csv("~/GitHub/GillData/logger_C_data.csv", na.strings="#N/A")
View(logger_C_data)
logger_A_data <- read.csv("~/GitHub/GillData/logger_A_data.csv", na.strings="#N/A")
logger_C_data <- read.csv("~/GitHub/GillData/logger_C_data.csv", na.strings="#N/A")
logger_D_data <- read.csv("~/GitHub/GillData/logger_D_data.csv", na.strings="#N/A")
logger_E_data <- read.csv("~/GitHub/GillData/logger_E_data.csv", na.strings="#N/A")
logger_F_data <- read.csv("~/GitHub/GillData/logger_F_data.csv", na.strings="#N/A")
logger_G_data <- read.csv("~/GitHub/GillData/logger_G_data.csv", na.strings="#N/A")
head(logger_A_data)
View()logger_C_data
View(logger_C_data)
View(logger_D_data)
View(logger_E_data)
View(logger_F_data)
View(logger_A_data)
head(logger_A_data)
library(tidyr)
library(ggplot2)
library(magrittr)
library(readr)
library(RCurl)
library(tidyr)
# Specify the columns you want to become unique rows
unique_columns <- c("Port1", "Port2", "Port3", "Port4", "Port5", "Port6")
# Transpose the data
transposed_data <- pivot_longer(logger_A_data, cols = unique_columns, names_to = "Column_Name", values_to = "Value")
# Specify the columns you want to become unique rows
unique_columns <- c("Port.1", "Port.2", "Port.3", "Port.4", "Port.5", "Port.6")
# Transpose the data
transposed_data <- pivot_longer(logger_A_data, cols = unique_columns, names_to = "Column_Name", values_to = "Value")
# View the transposed data
head(transposed_data)
# View the transposed data
view(transposed_data)
# View the transposed data
head(transposed_data)
# View the transposed data
View(transposed_data)
# Transpose the data
transposed_data <- pivot_longer(logger_A_data, cols = unique_columns, names_to = "Port", values_to = "Value")
# View the transposed data
View(transposed_data)
# Transpose the data
transposed_data <- pivot_longer(logger_A_data, cols = unique_columns, names_to = "Port", values_to = "WaterAmt")
# View the transposed data
View(transposed_data)
#transposing  data
# Specify the columns you want to become unique rows
unique_columns <- c("Port.1", "Port.2", "Port.3", "Port.4", "Port.5", "Port.6")
# Transpose the data
transposed_data_A <- pivot_longer(logger_A_data, cols = unique_columns, names_to = "Port", values_to = "WaterAmt")
# View the transposed data
View(transposed_data_A)
summary(transposed_data_A)
# View the transposed data
str(transposed_data_A)
# View the transposed data
str(transposed_data_A)
# Converting to date-time using POSIXct
A_data_date_time <- as.POSIXct(transposed_data_A, format = "%Y/%m/%d %H:%M")
# Converting to date-time using POSIXct
A_data_date_time <- as.POSIXct(transposed_data_A, format = "%Y-%m-%d %H:%M")
# Converting to date-time using POSIXct
A_data_date_time <- as.POSIXct(transposed_data_A, format = "%m/%d/%y %H:%M")
# View the converted POSIXct object
print(date_time)
# View the converted POSIXct object
print(A_data_date_time)
# Converting to date-time using POSIXct
A_data_date_time <- as.POSIXct(transposed_data_A, format = "%m/%d/%y %H:%M")
# Converting to date-time using POSIXct
A_data_date_time <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M")
# View the converted POSIXct object
print(A_data_date_time)
# Transpose the data
transposed_data_A <- pivot_longer(logger_A_data, cols = unique_columns, names_to = "Port", values_to = "WaterAmt")
# View the transposed data
str(transposed_data_A)
# Converting to date-time using POSIXct
A_data_date_time <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = "")
# View the converted POSIXct object
head(A_data_date_time)
# View the transposed data
str(transposed_data_A)
# View the converted POSIXct object
str(A_data_date_time)
# Converting to date-time using POSIXct
A_data_date_time <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = "")
# View the converted POSIXct object
str(A_data_date_time)
# View the converted POSIXct object
print(A_data_date_time)
# Converting to date-time using POSIXct
A_data_date_time$datetime <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = "")
# View the converted POSIXct object
print(A_data_date_time)
# Converting to date-time using POSIXct
dfA <- mutate(transposed_data_A datetime_col <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = ""))
# Converting to date-time using POSIXct
dfA <- mutate(transposed_data_A, datetime_col <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = ""))
library(tidyverse)
# View the transposed data
str(transposed_data_A)
# Converting to date-time using POSIXct
dfA <- mutate(transposed_data_A, datetime_col <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = ""))
# View the converted POSIXct object
print(dfA)
# Converting to date-time using POSIXct
dfA <- mutate(transposed_data_A, z6.07504 <- as.POSIXct(transposed_data_A$z6.07504, format = "%m/%d/%y %H:%M", tz = ""))
# View the converted POSIXct object
print(dfA)
