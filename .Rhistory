rename(Datetimes = "z6.07504") %>%
select(Datetimes, Port, WaterAmt)
# Converting to date-time using POSIXct (may not be necessary?)
dfA <- mutate(dataframe_A$Datetimes <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = ""))
# Converting to date-time using POSIXct (may not be necessary?)
dfA <- transform(dataframe_A$Datetimes <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = ""))
class(dfA)
# Converting to date-time using POSIXct (may not be necessary?)
dfA <- mutate(dataframe_A$Datetimes <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = ""))
view(dataframe_A)
# Example character data representing datetime
char_datetime <- "2024-05-04 13:40:00"
class(char_datetime)
# Convert character data to POSIXct
datetime <- as.POSIXct(char_datetime, format = "%Y-%m-%d %H:%M:%S")
# Check the class of the object
class(datetime)
# Print the object
print(datetime)
class(char_datetime)
# Check the class of the object
class(datetime)
# Print the object
print(datetime)
class(dataframe_A)
# Converting to date-time using POSIXct
dataframe_A$datetime <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = "")
class(dataframe_A)
class(datetime)
class(datetime)
library(ggplot2)
library(magrittr)
library(readr)
library(RCurl)
library(tidyr)
library(tidyverse)
logger_A_data <- read.csv("~/GitHub/GillData/logger_A_data.csv", na.strings="#N/A")
logger_C_data <- read.csv("~/GitHub/GillData/logger_C_data.csv", na.strings="#N/A")
logger_D_data <- read.csv("~/GitHub/GillData/logger_D_data.csv", na.strings="#N/A")
logger_E_data <- read.csv("~/GitHub/GillData/logger_E_data.csv", na.strings="#N/A")
logger_F_data <- read.csv("~/GitHub/GillData/logger_F_data.csv", na.strings="#N/A")
logger_G_data <- read.csv("~/GitHub/GillData/logger_G_data.csv", na.strings="#N/A")
head(logger_A_data)
#transposing  data
unique_columns <- c("Port.1", "Port.2", "Port.3", "Port.4", "Port.5", "Port.6")
transposed_data_A <- pivot_longer(logger_A_data, cols = all_of(unique_columns), names_to = "Port", values_to = "WaterAmt")
#str(transposed_data_A)
# Renaming columns
dataframe_A <- transposed_data_A %>%
rename(Datetimes = "z6.07504") %>%
select(Datetimes, Port, WaterAmt)
view(dataframe_A)
class(dataframe_A)
# Converting to date-time using POSIXct
dataframe_A$datetime <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = "")
#dfA <- mutate(dataframe_A$Datetimes <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = ""))
class(datetime)
# Converting to date-time using POSIXct
datetime <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = "")
class(datetime)
#str(transposed_data_A)
# Renaming columns
dataframe_A <- transposed_data_A %>%
rename(Datetimes = "z6.07504") %>%
select(Datetimes, Port, WaterAmt) %>%
as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = "")
view(datetime)
library(ggplot2)
library(magrittr)
library(readr)
library(RCurl)
library(tidyr)
library(tidyverse)
logger_A_data <- read.csv("~/GitHub/GillData/logger_A_data.csv", na.strings="#N/A")
logger_C_data <- read.csv("~/GitHub/GillData/logger_C_data.csv", na.strings="#N/A")
logger_D_data <- read.csv("~/GitHub/GillData/logger_D_data.csv", na.strings="#N/A")
logger_E_data <- read.csv("~/GitHub/GillData/logger_E_data.csv", na.strings="#N/A")
logger_F_data <- read.csv("~/GitHub/GillData/logger_F_data.csv", na.strings="#N/A")
logger_G_data <- read.csv("~/GitHub/GillData/logger_G_data.csv", na.strings="#N/A")
head(logger_A_data)
#transposing  data
unique_columns <- c("Port.1", "Port.2", "Port.3", "Port.4", "Port.5", "Port.6")
transposed_data_A <- pivot_longer(logger_A_data, cols = all_of(unique_columns), names_to = "Port", values_to = "WaterAmt")
View(transposed_data_A)
#str(transposed_data_A)
# Renaming columns
dataframe_A <- transposed_data_A %>%
rename(Datetimes = "z6.07504") %>%
select(Datetimes, Port, WaterAmt) %>%
as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = "")
# Converting to date-time using POSIXct
datetime <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = "")
class(z6.07504)
#str(transposed_data_A)
# Renaming columns
dataframe_A <- transposed_data_A %>%
rename(Datetimes = "z6.07504") %>%
select(Datetimes, Port, WaterAmt) #%>%
class(dataframe_A$Datetimes)
# Renaming columns
dataframe_A <- transposed_data_A %>%
rename(Datetimes = "z6.07504") %>%
select(Datetimes, Port, WaterAmt)
class(dataframe_A$Datetimes)
dataframe_A$Datetimes <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = "")
class(dataframe_A$Datetimes)
dataframe_A$Datetimes <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = "")
view(dataframe_A)
class(dataframe_A)
class(dataframe_A$Datetimes)
class(dataframe_A$Datetimes)
#Adding in Treatments, Fallow Y/N
dataframe_A <- dataframe_A %>%
mutate(treatment = case_when(
Port == "Port.1" ~ "TREATMENT_1",
Port == "Port.2" ~ "TREATMENT_1",
Port == "Port.3" ~ "TREATMENT_1",
Port == "Port.4" ~ "TREATMENT_2",
Port == "Port.5" ~ "TREATMENT_2",
Port == "Port.6" ~ "TREATMENT_2"
))
print(dataframe_A)
#Adding in Treatments, Fallow Y/N
dataframe_A <- dataframe_A %>%
mutate(treatment = case_when(
Port == "Port.1" ~ "TREATMENT_1",
Port == "Port.2" ~ "TREATMENT_1",
Port == "Port.3" ~ "TREATMENT_1",
Port == "Port.4" ~ "TREATMENT_2",
Port == "Port.5" ~ "TREATMENT_2",
Port == "Port.6" ~ "TREATMENT_2"
))
view(dataframe_A)
#Adding in Treatments, Fallow Y/N
dataframe_A <- dataframe_A %>%
mutate(Treatment = case_when(
Port == "Port.1" ~ "TREATMENT_1",
Port == "Port.2" ~ "TREATMENT_1",
Port == "Port.3" ~ "TREATMENT_1",
Port == "Port.4" ~ "TREATMENT_2",
Port == "Port.5" ~ "TREATMENT_2",
Port == "Port.6" ~ "TREATMENT_2"
))
#Timestamp vs. Water Content, color = Fallow YN
ggplot( dataframe_A, aes(x = Datetimes, y = WaterAmt, color = Treatment)) +
geom_point()
#Adding in Depths
dataframe_A <- dataframe_A %>%
mutate(Depth.cm =case_when(
Port == "Port.1" ~ "15",
Port == "Port.2" ~ "30",
Port == "Port.3" ~ "60",
Port == "Port.4" ~ "15",
Port == "Port.5" ~ "30",
Port == "Port.6" ~ "60"
))
view(dataframe_A)
logger_A_data <- read.csv("~/GitHub/GillData/logger_A_data.csv", na.strings="#N/A")
logger_C_data <- read.csv("~/GitHub/GillData/logger_C_data.csv", na.strings="#N/A")
logger_D_data <- read.csv("~/GitHub/GillData/logger_D_data.csv", na.strings="#N/A")
logger_E_data <- read.csv("~/GitHub/GillData/logger_E_data.csv", na.strings="#N/A")
logger_F_data <- read.csv("~/GitHub/GillData/logger_F_data.csv", na.strings="#N/A")
logger_G_data <- read.csv("~/GitHub/GillData/logger_G_data.csv", na.strings="#N/A")
#head(logger_A_data)
#transposing  data
unique_columns <- c("Port.1", "Port.2", "Port.3", "Port.4", "Port.5", "Port.6")
transposed_data_A <- pivot_longer(logger_A_data, cols = all_of(unique_columns), names_to = "Port", values_to = "WaterAmt")
# Renaming columns
dataframe_A <- transposed_data_A %>%
rename(Datetimes = "z6.07504") %>%
select(Datetimes, Port, WaterAmt)
#Conversion char to POSIXct (unix time)
dataframe_A$Datetimes <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = "")
#class(dataframe_A$Datetimes)
#Adding in Treatments, Fallow Y/N
dataframe_A <- dataframe_A %>%
mutate(Treatment = case_when(
Port == "Port.1" ~ "TREATMENT_1",
Port == "Port.2" ~ "TREATMENT_1",
Port == "Port.3" ~ "TREATMENT_1",
Port == "Port.4" ~ "TREATMENT_2",
Port == "Port.5" ~ "TREATMENT_2",
Port == "Port.6" ~ "TREATMENT_2"
))
view(dataframe_A)
#Adding in Depths
dataframe_A <- dataframe_A %>%
mutate(Depth.cm =case_when(
Port == "Port.1" ~ "15",
Port == "Port.2" ~ "30",
Port == "Port.3" ~ "60",
Port == "Port.4" ~ "15",
Port == "Port.5" ~ "30",
Port == "Port.6" ~ "60"
))
#Adding in Depths
dataframe_A <- dataframe_A %>%
mutate(Depth.cm =case_when(
Port == "Port.1" ~ "15",
Port == "Port.2" ~ "30",
Port == "Port.3" ~ "60",
Port == "Port.4" ~ "15",
Port == "Port.5" ~ "30",
Port == "Port.6" ~ "60"
))
view(dataframe_A)
#Timestamp vs. Water Content, color = Fallow YN
ggplot( dataframe_A, aes(x = Datetimes, y = WaterAmt, color = Treatment, fill = Depth.cm)) +
geom_point()
#Timestamp vs. Water Content, color = Fallow YN
ggplot( dataframe_A, aes(x = Datetimes, y = WaterAmt, color = Treatment, shape = Depth.cm)) +
geom_point()
#Timestamp vs. Water Content, color = Fallow YN
ggplot( dataframe_A, aes(x = Datetimes, y = WaterAmt, color = Treatment, shape = Depth.cm)) +
geom_point() +
scale_x_continuous(limits = c(0, 1), na.rm = T)
#Timestamp vs. Water Content, color = Fallow YN
ggplot( dataframe_A, aes(x = Datetimes, y = WaterAmt, color = Treatment, shape = Depth.cm)) +
geom_point() +
scale_x_continuous(limits = c(0, 1))
#Timestamp vs. Water Content, color = Fallow YN
ggplot( dataframe_A, aes(x = Datetimes, y = WaterAmt, color = Treatment, shape = Depth.cm)) +
geom_point() +
scale_y_continuous(limits = c(0, 1))
#Timestamp vs. Water Content, color = Fallow YN
ggplot( dataframe_A, aes(x = Datetimes, y = WaterAmt, color = Treatment, shape = Depth.cm)) +
geom_point() +
scale_y_continuous(limits = c(0.05, 1))
#Timestamp vs. Water Content, color = Fallow YN
ggplot( dataframe_A, aes(x = Datetimes, y = WaterAmt, color = Treatment, shape = Depth.cm)) +
geom_point() +
scale_y_continuous(limits = c(0.1, 0.5))
#Timestamp vs. Water Content, color = Fallow YN
ggplot( dataframe_A, aes(x = Datetimes, y = WaterAmt, color = Treatment, shape = Depth.cm)) +
geom_point() +
scale_y_continuous(limits = c(0.15, 0.4))
#Timestamp vs. Water Content, color = Fallow YN
ggplot( dataframe_A, aes(x = Datetimes, y = WaterAmt, color = Depth.cm, shape = Treatment)) +
geom_point() +
scale_y_continuous(limits = c(0.15, 0.4))
#Timestamp vs. Water Content, color = Fallow YN
ggplot( dataframe_A, aes(x = Datetimes, y = WaterAmt, color = Depth.cm, shape = Treatment)) +
geom_point() +
scale_y_continuous(limits = c(0.18, 0.4))
#Timestamp vs. Water Content, color = Fallow YN
ggplot( dataframe_A, aes(x = Datetimes, y = WaterAmt, color = Depth.cm, shape = Treatment)) +
geom_point() +
scale_y_continuous(limits = c(0.18, 0.37))
#Timestamp vs. Water Content, color = Depth
ggplot( dataframe_A, aes(x = Datetimes, y = WaterAmt, color = Depth.cm)) +
geom_point() +
scale_y_continuous(limits = c(0.18, 0.37)) ##Removes negative values from calibration
#Timestamp vs. Water Content, color = Treatment
ggplot(dataframe_A, aes(x = Datetimes, y = WaterAmt, color = Treatment)) +
geom_point() +
scale_y_continuous(limits = c(0.18, 0.37)) ##Removes negative values from calibration
library(ggplot2)
library(magrittr)
library(readr)
library(RCurl)
library(tidyr)
library(tidyverse)
logger_A_data <- read.csv("~/GitHub/GillData/logger_A_data.csv", na.strings="#N/A")
logger_C_data <- read.csv("~/GitHub/GillData/logger_C_data.csv", na.strings="#N/A")
logger_D_data <- read.csv("~/GitHub/GillData/logger_D_data.csv", na.strings="#N/A")
logger_E_data <- read.csv("~/GitHub/GillData/logger_E_data.csv", na.strings="#N/A")
logger_F_data <- read.csv("~/GitHub/GillData/logger_F_data.csv", na.strings="#N/A")
logger_G_data <- read.csv("~/GitHub/GillData/logger_G_data.csv", na.strings="#N/A")
#head(logger_A_data)
#transposing  data
unique_columns <- c("Port.1", "Port.2", "Port.3", "Port.4", "Port.5", "Port.6")
transposed_data_A <- pivot_longer(logger_A_data, cols = all_of(unique_columns), names_to = "Port", values_to = "WaterAmt")
# Renaming columns
dataframe_A <- transposed_data_A %>%
rename(Datetimes = "z6.07504") %>%
select(Datetimes, Port, WaterAmt)
#Conversion char to POSIXct (unix time)
dataframe_A$Datetimes <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = "")
#class(dataframe_A$Datetimes)
#Adding in Treatments, Fallow Y/N
dataframe_A <- dataframe_A %>%
mutate(Treatment = case_when(
Port == "Port.1" ~ "TREATMENT_1",
Port == "Port.2" ~ "TREATMENT_1",
Port == "Port.3" ~ "TREATMENT_1",
Port == "Port.4" ~ "TREATMENT_2",
Port == "Port.5" ~ "TREATMENT_2",
Port == "Port.6" ~ "TREATMENT_2"
))
#Adding in Depths
dataframe_A <- dataframe_A %>%
mutate(Depth.cm =case_when(
Port == "Port.1" ~ "15",
Port == "Port.2" ~ "30",
Port == "Port.3" ~ "60",
Port == "Port.4" ~ "15",
Port == "Port.5" ~ "30",
Port == "Port.6" ~ "60"
))
view(dataframe_A)
#Timestamp vs. Water Content, color = Depth
ggplot(dataframe_A, aes(x = Datetimes, y = WaterAmt, color = Depth.cm)) +
geom_point() +
scale_y_continuous(limits = c(0.18, 0.37)) ##Removes negative values from calibration
#Timestamp vs. Water Content, color = Treatment
ggplot(dataframe_A, aes(x = Datetimes, y = WaterAmt, color = Treatment)) +
geom_point() +
scale_y_continuous(limits = c(0.18, 0.37)) ##Removes negative values from calibration
#transposing  data
unique_columns <- c("Port.1", "Port.2", "Port.3", "Port.4", "Port.5", "Port.6")
transposed_data_A <- pivot_longer(logger_A_data, cols = all_of(unique_columns), names_to = "Port", values_to = "WaterAmt")
# Renaming columns
dataframe_A <- transposed_data_A %>%
rename(Datetimes = "z6.07504") %>%
select(Datetimes, Port, WaterAmt)
#Conversion char to POSIXct (unix time)
dataframe_A$Datetimes <- as.POSIXct(dataframe_A$Datetimes, format = "%m/%d/%y %H:%M", tz = "")
#class(dataframe_A$Datetimes)
#Adding in Treatments, Fallow Y/N
dataframe_A <- dataframe_A %>%
mutate(Treatment = case_when(
Port == "Port.1" ~ "Rye-Radish",
Port == "Port.2" ~ "Rye-Radish",
Port == "Port.3" ~ "Rye-Radish",
Port == "Port.4" ~ "Rye-Vetch",
Port == "Port.5" ~ "Rye-Vetch",
Port == "Port.6" ~ "Rye-Vetch"
))
#Adding in Depths
dataframe_A <- dataframe_A %>%
mutate(Depth.cm =case_when(
Port == "Port.1" ~ "15",
Port == "Port.2" ~ "30",
Port == "Port.3" ~ "60",
Port == "Port.4" ~ "15",
Port == "Port.5" ~ "30",
Port == "Port.6" ~ "60"
))
view(dataframe_A)
#Timestamp vs. Water Content, color = Depth
ggplot(dataframe_A, aes(x = Datetimes, y = WaterAmt, color = Depth.cm)) +
geom_point() +
scale_y_continuous(limits = c(0.18, 0.37)) ##Removes negative values from calibration
#Timestamp vs. Water Content, color = Treatment
ggplot(dataframe_A, aes(x = Datetimes, y = WaterAmt, color = Treatment)) +
geom_point() +
scale_y_continuous(limits = c(0.18, 0.37)) ##Removes negative values from calibration
library(ggplot2)
library(magrittr)
library(readr)
library(RCurl)
library(tidyr)
library(tidyverse)
#Soil Sensor Data
logger_A_data <- read.csv("~/GitHub/GillData/logger_A_data.csv", na.strings="#N/A")
logger_C_data <- read.csv("~/GitHub/GillData/logger_C_data.csv", na.strings="#N/A")
logger_D_data <- read.csv("~/GitHub/GillData/logger_D_data.csv", na.strings="#N/A")
logger_E_data <- read.csv("~/GitHub/GillData/logger_E_data.csv", na.strings="#N/A")
logger_F_data <- read.csv("~/GitHub/GillData/logger_F_data.csv", na.strings="#N/A")
logger_G_data <- read.csv("~/GitHub/GillData/logger_G_data.csv", na.strings="#N/A")
#head(logger_A_data)
#Soil Core Data
Soilcore_Data <- read.csv("~/GitHub/GillData/Soilcore_Data.csv")
view(Soilcore_Data)
#Biomass Data
Biomass_Data <- read.csv("~/GitHub/GillData/Biomass_Data.csv")
view(Biomass_Data)
#Weather Data
Weather_Data <- read.csv("~/GitHub/GillData/UC_Gill_Tract_Weather_Data.csv")
view(Weather_Data)
#Logger A
logger_A_data <- logger_A_data %>%
mutate(logger = "A") %>%
rename(Datetimes = "z6.07504")
#view(logger_A_data)
#Logger C
logger_C_data <- logger_C_data %>%
mutate(logger = "C") %>%
rename(Datetimes = "z6.07590")
#view(logger_C_data)
#Logger D
logger_D_data <- logger_D_data %>%
mutate(logger = "D") %>%
rename(Datetimes = "z6.07591")
#view(logger_D_data)
#Logger E
logger_E_data <- logger_E_data %>%
mutate(logger = "E") %>%
rename(Datetimes = "z6.07506")
#view(logger_E_data)
#Logger F
logger_F_data <- logger_F_data %>%
mutate(logger = "F") %>%
rename(Datetimes = "z6.07592")
#view(logger_F_data)
#Logger G
logger_G_data <- logger_G_data %>%
mutate(logger = "G") %>%
rename(Datetimes = "z6.07509")
#view(logger_G_data)
#Combining all loggers' data
combined_data <- rbind(logger_A_data, logger_C_data, logger_D_data, logger_E_data, logger_F_data, logger_G_data)
#view(combined_data)
#transposing  data
unique_columns <- c("Port.1", "Port.2", "Port.3", "Port.4", "Port.5", "Port.6")
combined_transposed <- pivot_longer(combined_data, cols = all_of(unique_columns), names_to = "Port", values_to = "WaterAmt")
#view(combined_transposed)
#Conversion char to POSIXct (unix time)
combined_transposed$Datetimes <- as.POSIXct(combined_transposed$Datetimes, format = "%m/%d/%y %H:%M", tz = "")
#class(combined_transposed$Datetimes)
#Selecting Columns
combined_transposed <- combined_transposed %>%
select(Datetimes, logger, Port, WaterAmt)
#view(combined_transposed)
#Adding in Depths
combined_transposed <- combined_transposed %>%
mutate(Depth.cm =case_when(
Port == "Port.1" ~ "15",
Port == "Port.2" ~ "30",
Port == "Port.3" ~ "60",
Port == "Port.4" ~ "15",
Port == "Port.5" ~ "30",
Port == "Port.6" ~ "60"
))
#view(combined_transposed)
#Weather Data Fixing
#Conversion char to POSIXct (unix time)
Weather_Data$Datetimes <- as.POSIXct(Weather_Data$Datetime, format = "%m/%d/%y %H:%M", tz = "")
#class(Weather_Data$Datetimes)
#Adding Treatments
df <- combined_transposed %>%
mutate(Treatment = case_when(
#Logger A
((Port == "Port.1" | Port == "Port.2" | Port == "Port.3") & logger == "A") ~ "Rye-Radish",
((Port == "Port.4" | Port == "Port.5" | Port == "Port.6") & logger == "A") ~ "Rye-Vetch",
#Logger C
((Port == "Port.1" | Port == "Port.2" | Port == "Port.3") & logger == "C") ~ "Fallow",
((Port == "Port.4" | Port == "Port.5" | Port == "Port.6") & logger == "C") ~ "4-seed",
#Logger D
((Port == "Port.1" | Port == "Port.2" | Port == "Port.3") & logger == "D") ~ "Rye Mono",
((Port == "Port.4" | Port == "Port.5" | Port == "Port.6") & logger == "D") ~ "Rye-vetch",
#Logger E
((Port == "Port.1" | Port == "Port.2" | Port == "Port.3") & logger == "E") ~ "Rye-Vetch",
((Port == "Port.4" | Port == "Port.5" | Port == "Port.6") & logger == "E") ~ "Fallow",
#Logger F
((Port == "Port.1" | Port == "Port.2" | Port == "Port.3") & logger == "F") ~ "4-seed",
((Port == "Port.4" | Port == "Port.5" | Port == "Port.6") & logger == "F") ~ "Rye Mono",
#Logger G
((Port == "Port.1" | Port == "Port.2" | Port == "Port.3") & logger == "G") ~ "4-seed",
((Port == "Port.4" | Port == "Port.5" | Port == "Port.6") & logger == "G") ~ "Fallow",
TRUE ~ NA_character_
)) %>%
mutate(Fallow_YN = ifelse(Treatment == "Fallow", "Y", "N"))
#view(df)
#Timestamp vs. Water Content, color = Depth
ggplot(df, aes(x = Datetimes, y = WaterAmt, color = Depth.cm)) +
geom_smooth(na.rm = T) +
# geom_point() +
scale_y_continuous(limits = c(0.18, 0.45)) ##Removes negative values from calibration
#Timestamp vs. Water Content, color = Treatment
ggplot(df, aes(x = Datetimes, y = WaterAmt, color = Treatment)) +
geom_smooth(na.rm = T) +
# geom_point() +
scale_y_continuous(limits = c(0.18, 0.45)) ##Removes negative values from calibration
#Timestamp vs. Water Content, color = Fallow YN
ggplot(df, aes(x = Datetimes, y = WaterAmt, color = Fallow_YN)) +
geom_smooth(na.rm = T) +
#geom_point() +
scale_y_continuous(limits = c(0.18, 0.45)) ##Removes negative values from calibration
##Analyzing Weather Data
#Aggregating Daily Rainfall
daily_rain <- Weather_Data %>%
mutate(Date = as.Date(Datetimes)) %>%  #Extract the date part
group_by(Date) %>%
summarise(daily_rainfall = sum(Rain...in, na.rm = T))
#print(daily_rain)
ggplot(daily_rain, aes(x = Date, y = daily_rainfall)) +
geom_line(color = "blue", na.rm = T) +
geom_point(color = "blue", na.rm = T) +
labs(title = "UC Gill Tract 2023-24 Daily Rainfall",
x = "Date",
y = "Daily Rainfall (in)") +
theme_minimal()
#Daily Temp High and Low
daily_temps <- Weather_Data %>%
mutate(Date = as.Date(Datetimes)) %>%  #Extract the date part
group_by(Date) %>%
summarise(
MinTemp = min(Temp....F, na.rm = T),
MaxTemp = max(Temp....F, na.rm = T)
)
#print(daily_temps)
#Reshaping Max & Min Temp dataframe
long_temps <- daily_temps %>%
pivot_longer(cols = c(MinTemp, MaxTemp),
names_to = "TempType",
values_to = "Temp.F")
long_temps$Temp.F <- as.numeric(long_temps$Temp.F)
#str(long_temps)
ggplot(long_temps, aes(x = Date, y = Temp.F, color = TempType)) +
geom_line(aes(group = TempType), na.rm = T) +
geom_point(na.rm = T) + # Add points to the line plot for better visibility
labs(title = "UC Gill Tract 2023-24 Daily Minimum and Maximum Temperatures",
x = "Date",
y = "Temperature (°F)") +
scale_color_manual(values = c("MinTemp" = "blue", "MaxTemp" = "red"),
labels = c("Minimum Temperature", "Maximum Temperature")) +
theme_minimal()
#1. What do the diff treatments look like in biomass? Is it significant? Does it represent greater N uptake?
#2. Can I use et models (combination, energy transfer) to distinguish between treatments?
#3. What does the drydown look like (post-April) for different treatments?
#4. Tradeoffs: Planting early/term early to minimize water loss and protect groundwater (N scavenging), BUT irrigation would be needed. Would the irrigated water 'budget' be returned?
